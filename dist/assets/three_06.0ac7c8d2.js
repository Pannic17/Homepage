import{aq as J,C as V,ar as ee,as as b,at as d,ak as O,j as w,q as D,Q as te,au as ne,ai as G,V as A,av as P,z as ie,aw as U,M as k,ax as X,am as Z,ay as se,aa as L,s as K,az as re,t as ae,B as N,aA as oe,i as le,g as j,ag as ce,D as ue,d as z,an as de,P as he,ao as fe}from"./ThreeInit.562ee8fc.js";import{E as ve,R as ge}from"./RenderPass.59a053fd.js";import{_ as pe}from"./index.35ac8ade.js";import{m as me,o as Ee,a as xe,p as Te,d as ye,b as _e}from"./vendor.eebc2ca3.js";/**
 * postprocessing v6.23.2 build Thu Oct 28 2021
 * https://github.com/vanruesc/postprocessing
 * Copyright 2021 Raoul van RÃ¼schen
 * @license Zlib
 */var F={RED:0,GREEN:1,BLUE:2,ALPHA:3},Re="varying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}",Ae=`#include <common>
#include <dithering_pars_fragment>
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec4 sum=texture2D(inputBuffer,vUv0);sum+=texture2D(inputBuffer,vUv1);sum+=texture2D(inputBuffer,vUv2);sum+=texture2D(inputBuffer,vUv3);gl_FragColor=sum*0.25;
#include <dithering_fragment>
}`,Me="uniform vec2 texelSize;uniform vec2 halfTexelSize;uniform float kernel;uniform float scale;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec2 uv=position.xy*0.5+0.5;vec2 dUv=(texelSize*vec2(kernel)+halfTexelSize)*scale;vUv0=vec2(uv.x-dUv.x,uv.y+dUv.y);vUv1=vec2(uv.x+dUv.x,uv.y+dUv.y);vUv2=vec2(uv.x+dUv.x,uv.y-dUv.y);vUv3=vec2(uv.x-dUv.x,uv.y-dUv.y);gl_Position=vec4(position.xy,1.0,1.0);}",W=class extends G{constructor(e=new A){super({type:"ConvolutionMaterial",uniforms:{inputBuffer:new d(null),texelSize:new d(new A),halfTexelSize:new d(new A),kernel:new d(0),scale:new d(1)},fragmentShader:Ae,vertexShader:Me,blending:P,depthWrite:!1,depthTest:!1});this.toneMapped=!1,this.setTexelSize(e.x,e.y),this.kernelSize=I.LARGE}getKernel(){return be[this.kernelSize]}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t),this.uniforms.halfTexelSize.value.set(e,t).multiplyScalar(.5)}},be=[new Float32Array([0,0]),new Float32Array([0,1,1]),new Float32Array([0,1,1,2]),new Float32Array([0,1,2,2,3]),new Float32Array([0,1,2,3,4,4,5]),new Float32Array([0,1,2,3,4,5,7,8,9,10])],I={VERY_SMALL:0,SMALL:1,MEDIUM:2,LARGE:3,VERY_LARGE:4,HUGE:5},Se=`#include <common>
#include <packing>
#include <dithering_pars_fragment>
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#ifdef GL_FRAGMENT_PRECISION_HIGH
uniform highp sampler2D depthBuffer;
#else
uniform mediump sampler2D depthBuffer;
#endif
uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;float readDepth(const in vec2 uv){
#if DEPTH_PACKING == 3201
return unpackRGBAToDepth(texture2D(depthBuffer,uv));
#else
return texture2D(depthBuffer,uv).r;
#endif
}float getViewZ(const in float depth){
#ifdef PERSPECTIVE_CAMERA
return perspectiveDepthToViewZ(depth,cameraNear,cameraFar);
#else
return orthographicDepthToViewZ(depth,cameraNear,cameraFar);
#endif
}FRAGMENT_HEADvoid main(){FRAGMENT_MAIN_UVvec4 color0=texture2D(inputBuffer,UV);vec4 color1=vec4(0.0);FRAGMENT_MAIN_IMAGEgl_FragColor=color0;
#ifdef ENCODE_OUTPUT
#include <encodings_fragment>
#endif
#include <dithering_fragment>
}`,we="uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;VERTEX_HEADvoid main(){vUv=position.xy*0.5+0.5;VERTEX_MAIN_SUPPORTgl_Position=vec4(position.xy,1.0,1.0);}",Ue=class extends G{constructor(e=null,t=null,n=null,i,s=!1){super({type:"EffectMaterial",defines:{DEPTH_PACKING:"0",ENCODE_OUTPUT:"1"},uniforms:{inputBuffer:new d(null),depthBuffer:new d(null),resolution:new d(new A),texelSize:new d(new A),cameraNear:new d(.3),cameraFar:new d(1e3),aspect:new d(1),time:new d(0)},blending:P,depthWrite:!1,depthTest:!1,dithering:s});this.toneMapped=!1,e!==null&&this.setShaderParts(e),t!==null&&this.setDefines(t),n!==null&&this.setUniforms(n),this.adoptCameraSettings(i)}get depthPacking(){return Number(this.defines.DEPTH_PACKING)}set depthPacking(e){this.defines.DEPTH_PACKING=e.toFixed(0),this.needsUpdate=!0}setShaderParts(e){return this.fragmentShader=Se.replace(a.FRAGMENT_HEAD,e.get(a.FRAGMENT_HEAD)).replace(a.FRAGMENT_MAIN_UV,e.get(a.FRAGMENT_MAIN_UV)).replace(a.FRAGMENT_MAIN_IMAGE,e.get(a.FRAGMENT_MAIN_IMAGE)),this.vertexShader=we.replace(a.VERTEX_HEAD,e.get(a.VERTEX_HEAD)).replace(a.VERTEX_MAIN_SUPPORT,e.get(a.VERTEX_MAIN_SUPPORT)),this.needsUpdate=!0,this}setDefines(e){for(const t of e.entries())this.defines[t[0]]=t[1];return this.needsUpdate=!0,this}setUniforms(e){for(const t of e.entries())this.uniforms[t[0]]=t[1];return this}adoptCameraSettings(e=null){e!==null&&(this.uniforms.cameraNear.value=e.near,this.uniforms.cameraFar.value=e.far,e instanceof ie?this.defines.PERSPECTIVE_CAMERA="1":delete this.defines.PERSPECTIVE_CAMERA,this.needsUpdate=!0)}setSize(e,t){const n=Math.max(e,1),i=Math.max(t,1);this.uniforms.resolution.value.set(n,i),this.uniforms.texelSize.value.set(1/n,1/i),this.uniforms.aspect.value=n/i}},a={FRAGMENT_HEAD:"FRAGMENT_HEAD",FRAGMENT_MAIN_UV:"FRAGMENT_MAIN_UV",FRAGMENT_MAIN_IMAGE:"FRAGMENT_MAIN_IMAGE",VERTEX_HEAD:"VERTEX_HEAD",VERTEX_MAIN_SUPPORT:"VERTEX_MAIN_SUPPORT"},Ne=`#include <common>
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#ifdef RANGE
uniform vec2 range;
#elif defined(THRESHOLD)
uniform float threshold;uniform float smoothing;
#endif
varying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);float l=linearToRelativeLuminance(texel.rgb);
#ifdef RANGE
float low=step(range.x,l);float high=step(l,range.y);l*=low*high;
#elif defined(THRESHOLD)
l=smoothstep(threshold,threshold+smoothing,l);
#endif
#ifdef COLOR
gl_FragColor=vec4(texel.rgb*l,l);
#else
gl_FragColor=vec4(l);
#endif
}`,Fe=class extends G{constructor(e=!1,t=null){const n=t!==null;super({type:"LuminanceMaterial",uniforms:{inputBuffer:new d(null),threshold:new d(0),smoothing:new d(1),range:new d(n?t:new A)},fragmentShader:Ne,vertexShader:Re,blending:P,depthWrite:!1,depthTest:!1});this.toneMapped=!1,this.colorOutput=e,this.useThreshold=!0,this.useRange=n}get threshold(){return this.uniforms.threshold.value}set threshold(e){this.uniforms.threshold.value=e}get smoothing(){return this.uniforms.smoothing.value}set smoothing(e){this.uniforms.smoothing.value=e}get useThreshold(){return this.defines.THRESHOLD!==void 0}set useThreshold(e){e?this.defines.THRESHOLD="1":delete this.defines.THRESHOLD,this.needsUpdate=!0}get colorOutput(){return this.defines.COLOR!==void 0}set colorOutput(e){e?this.defines.COLOR="1":delete this.defines.COLOR,this.needsUpdate=!0}setColorOutputEnabled(e){this.colorOutput=e}get useRange(){return this.defines.RANGE!==void 0}set useRange(e){e?this.defines.RANGE="1":delete this.defines.RANGE,this.needsUpdate=!0}get luminanceRange(){return this.useRange}set luminanceRange(e){this.useRange=e}setLuminanceRangeEnabled(e){this.useRange=e}},Ie=new J,M=null;function Ce(){if(M===null){const e=new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),t=new Float32Array([0,0,2,0,0,2]);M=new ae,M.setAttribute!==void 0?(M.setAttribute("position",new N(e,3)),M.setAttribute("uv",new N(t,2))):(M.addAttribute("position",new N(e,3)),M.addAttribute("uv",new N(t,2)))}return M}var B=class{constructor(e="Pass",t=new U,n=Ie){this.name=e,this.scene=t,this.camera=n,this.screen=null,this.rtt=!0,this.needsSwap=!0,this.needsDepthTexture=!1,this.enabled=!0}get renderToScreen(){return!this.rtt}set renderToScreen(e){if(this.rtt===e){const t=this.getFullscreenMaterial();t!==null&&(t.needsUpdate=!0),this.rtt=!e}}isEnabled(){return this.enabled}setEnabled(e){this.enabled=e}getFullscreenMaterial(){return this.screen!==null?this.screen.material:null}setFullscreenMaterial(e){let t=this.screen;t!==null?t.material=e:(t=new k(Ce(),e),t.frustumCulled=!1,this.scene===null&&(this.scene=new U),this.scene.add(t),this.screen=t)}getDepthTexture(){return null}setDepthTexture(e,t=0){}render(e,t,n,i,s){throw new Error("Render method not implemented!")}setSize(e,t){}initialize(e,t,n){}dispose(){const e=this.getFullscreenMaterial();e!==null&&e.dispose();for(const t of Object.keys(this)){const n=this[t];if(n!==null&&typeof n.dispose=="function"){if(n instanceof U)continue;this[t].dispose()}}}},_=-1,R=class{constructor(e,t=_,n=_,i=1){this.resizable=e,this.base=new A(1,1),this.target=new A(t,n),this.s=i}get scale(){return this.s}set scale(e){this.s=e,this.target.x=_,this.target.y=_,this.resizable.setSize(this.base.x,this.base.y)}get width(){const e=this.base,t=this.target;let n;return t.x!==_?n=t.x:t.y!==_?n=Math.round(t.y*(e.x/e.y)):n=Math.round(e.x*this.s),n}set width(e){this.target.x=e,this.resizable.setSize(this.base.x,this.base.y)}get height(){const e=this.base,t=this.target;let n;return t.y!==_?n=t.y:t.x!==_?n=Math.round(t.x/(e.x/e.y)):n=Math.round(e.y*this.s),n}set height(e){this.target.y=e,this.resizable.setSize(this.base.x,this.base.y)}static get AUTO_SIZE(){return _}},Oe=class extends B{constructor({resolutionScale:e=.5,width:t=R.AUTO_SIZE,height:n=R.AUTO_SIZE,kernelSize:i=I.LARGE}={}){super("BlurPass");this.renderTargetA=new O(1,1,{minFilter:w,magFilter:w,stencilBuffer:!1,depthBuffer:!1}),this.renderTargetA.texture.name="Blur.Target.A",this.renderTargetB=this.renderTargetA.clone(),this.renderTargetB.texture.name="Blur.Target.B",this.resolution=new R(this,t,n,e),this.convolutionMaterial=new W,this.ditheredConvolutionMaterial=new W,this.ditheredConvolutionMaterial.dithering=!0,this.dithering=!1,this.kernelSize=i}get width(){return this.resolution.width}set width(e){this.resolution.width=e}get height(){return this.resolution.height}set height(e){this.resolution.height=e}get scale(){return this.convolutionMaterial.uniforms.scale.value}set scale(e){this.convolutionMaterial.uniforms.scale.value=e,this.ditheredConvolutionMaterial.uniforms.scale.value=e}get kernelSize(){return this.convolutionMaterial.kernelSize}set kernelSize(e){this.convolutionMaterial.kernelSize=e,this.ditheredConvolutionMaterial.kernelSize=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}render(e,t,n,i,s){const o=this.scene,h=this.camera,v=this.renderTargetA,E=this.renderTargetB;let g=this.convolutionMaterial,l=g.uniforms;const x=g.getKernel();let m=t,c,r,p;for(this.setFullscreenMaterial(g),r=0,p=x.length-1;r<p;++r)c=(r&1)==0?v:E,l.kernel.value=x[r],l.inputBuffer.value=m.texture,e.setRenderTarget(c),e.render(o,h),m=c;this.dithering&&(g=this.ditheredConvolutionMaterial,l=g.uniforms,this.setFullscreenMaterial(g)),l.kernel.value=x[r],l.inputBuffer.value=m.texture,e.setRenderTarget(this.renderToScreen?null:n),e.render(o,h)}setSize(e,t){const n=this.resolution;n.base.set(e,t);const i=n.width,s=n.height;this.renderTargetA.setSize(i,s),this.renderTargetB.setSize(i,s),this.convolutionMaterial.setTexelSize(1/i,1/s),this.ditheredConvolutionMaterial.setTexelSize(1/i,1/s)}initialize(e,t,n){if(!t&&n===b&&(this.renderTargetA.texture.format=D,this.renderTargetB.texture.format=D),n!==void 0&&(this.renderTargetA.texture.type=n,this.renderTargetB.texture.type=n,n!==b)){const i=this.convolutionMaterial,s=this.ditheredConvolutionMaterial;i.defines.FRAMEBUFFER_PRECISION_HIGH="1",s.defines.FRAMEBUFFER_PRECISION_HIGH="1"}}static get AUTO_SIZE(){return R.AUTO_SIZE}};new V;var u={SKIP:0,ADD:1,ALPHA:2,AVERAGE:3,COLOR_BURN:4,COLOR_DODGE:5,DARKEN:6,DIFFERENCE:7,EXCLUSION:8,LIGHTEN:9,MULTIPLY:10,DIVIDE:11,NEGATION:12,NORMAL:13,OVERLAY:14,REFLECT:15,SCREEN:16,SOFT_LIGHT:17,SUBTRACT:18},De="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return min(x+y,1.0)*opacity+x*(1.0-opacity);}",Ge="vec3 blend(const in vec3 x,const in vec3 y,const in float opacity){return y*opacity+x*(1.0-opacity);}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){float a=min(y.a,opacity);return vec4(blend(x.rgb,y.rgb,a),max(x.a,a));}",Pe="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return(x+y)*0.5*opacity+x*(1.0-opacity);}",Le="float blend(const in float x,const in float y){return(y==0.0)? y : max(1.0-(1.0-x)/y,0.0);}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}",ze="float blend(const in float x,const in float y){return(y==1.0)? y : min(x/(1.0-y),1.0);}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}",Be="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return min(x,y)*opacity+x*(1.0-opacity);}",He="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return abs(x-y)*opacity+x*(1.0-opacity);}",Ve="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return(x+y-2.0*x*y)*opacity+x*(1.0-opacity);}",ke="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return max(x,y)*opacity+x*(1.0-opacity);}",Xe="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return x*y*opacity+x*(1.0-opacity);}",Ze="float blend(const in float x,const in float y){return(y>0.0)? min(x/y,1.0): 1.0;}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}",Ke="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return(1.0-abs(1.0-x-y))*opacity+x*(1.0-opacity);}",je="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return y*opacity+x*(1.0-opacity);}",We="float blend(const in float x,const in float y){return(x<0.5)?(2.0*x*y):(1.0-2.0*(1.0-x)*(1.0-y));}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}",Ye="float blend(const in float x,const in float y){return(y==1.0)? y : min(x*x/(1.0-y),1.0);}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}",qe="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return(1.0-(1.0-x)*(1.0-y))*opacity+x*(1.0-opacity);}",$e="float blend(const in float x,const in float y){return(y<0.5)?(2.0*x*y+x*x*(1.0-2.0*y)):(sqrt(x)*(2.0*y-1.0)+2.0*x*(1.0-y));}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}",Qe="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return max(x+y-1.0,0.0)*opacity+x*(1.0-opacity);}",Je=new Map([[u.SKIP,null],[u.ADD,De],[u.ALPHA,Ge],[u.AVERAGE,Pe],[u.COLOR_BURN,Le],[u.COLOR_DODGE,ze],[u.DARKEN,Be],[u.DIFFERENCE,He],[u.EXCLUSION,Ve],[u.LIGHTEN,ke],[u.MULTIPLY,Xe],[u.DIVIDE,Ze],[u.NEGATION,Ke],[u.NORMAL,je],[u.OVERLAY,We],[u.REFLECT,Ye],[u.SCREEN,qe],[u.SOFT_LIGHT,$e],[u.SUBTRACT,Qe]]),et=class extends X{constructor(e,t=1){super();this.blendFunction=e,this.opacity=new d(t)}getBlendFunction(){return this.blendFunction}setBlendFunction(e){this.blendFunction=e,this.dispatchEvent({type:"change"})}getShaderCode(){return Je.get(this.blendFunction)}},Y=class extends X{constructor(e,t,{attributes:n=S.NONE,blendFunction:i=u.SCREEN,defines:s=new Map,uniforms:o=new Map,extensions:h=null,vertexShader:v=null}={}){super();this.name=e,this.attributes=n,this.fragmentShader=t,this.vertexShader=v,this.defines=s,this.uniforms=o,this.extensions=h,this.blendMode=new et(i),this.blendMode.addEventListener("change",E=>this.setChanged())}setChanged(){this.dispatchEvent({type:"change"})}getAttributes(){return this.attributes}setAttributes(e){this.attributes=e,this.setChanged()}getFragmentShader(){return this.fragmentShader}setFragmentShader(e){this.fragmentShader=e,this.setChanged()}getVertexShader(){return this.vertexShader}setVertexShader(e){this.vertexShader=e,this.setChanged()}setDepthTexture(e,t=0){}update(e,t,n){}setSize(e,t){}initialize(e,t,n){}dispose(){for(const e of Object.keys(this)){const t=this[e];if(t!==null&&typeof t.dispose=="function"){if(t instanceof U)continue;this[e].dispose()}}}},S={NONE:0,DEPTH:1,CONVOLUTION:2};function H(e,t){const n=[];let i;for(;(i=e.exec(t))!==null;)n.push(i[1]);return n}function q(e,t,n){let i,s;for(const o of t){i="$1"+e+o.charAt(0).toUpperCase()+o.slice(1),s=new RegExp("([^\\.])(\\b"+o+"\\b)","g");for(const h of n.entries())h[1]!==null&&n.set(h[0],h[1].replace(s,i))}}function tt(e,t,n,i,s,o,h){const v=/(?:\w+\s+(\w+)\([\w\s,]*\)\s*{[^}]+})/g,E=/(?:varying\s+\w+\s+(\w*))/g,g=t.blendMode,l=new Map([["fragment",t.getFragmentShader()],["vertex",t.getVertexShader()]]),x=l.get("fragment")!==void 0&&/mainImage/.test(l.get("fragment")),m=l.get("fragment")!==void 0&&/mainUv/.test(l.get("fragment"));let c=[],r=[],p=!1,y=!1;if(l.get("fragment")===void 0)console.error("Missing fragment shader",t);else if(m&&(h&S.CONVOLUTION)!=0)console.error("Effects that transform UV coordinates are incompatible with convolution effects",t);else if(!x&&!m)console.error("The fragment shader contains neither a mainImage nor a mainUv function",t);else{if(m&&(n.set(a.FRAGMENT_MAIN_UV,n.get(a.FRAGMENT_MAIN_UV)+"	"+e+`MainUv(UV);
`),p=!0),l.get("vertex")!==null&&/mainSupport/.test(l.get("vertex"))){let f="	"+e+"MainSupport(";/mainSupport *\([\w\s]*?uv\s*?\)/.test(l.get("vertex"))&&(f+="vUv"),f+=`);
`,n.set(a.VERTEX_MAIN_SUPPORT,n.get(a.VERTEX_MAIN_SUPPORT)+f),c=c.concat(H(E,l.get("vertex"))),r=r.concat(c).concat(H(v,l.get("vertex")))}if(r=r.concat(H(v,l.get("fragment"))),r=r.concat(Array.from(t.defines.keys()).map(f=>f.replace(/\([\w\s,]*\)/g,""))),r=r.concat(Array.from(t.uniforms.keys())),t.uniforms.forEach((f,T)=>o.set(e+T.charAt(0).toUpperCase()+T.slice(1),f)),t.defines.forEach((f,T)=>s.set(e+T.charAt(0).toUpperCase()+T.slice(1),f)),q(e,r,s),q(e,r,l),i.set(g.blendFunction,g),x){const f=/MainImage *\([\w\s,]*?depth[\w\s,]*?\)/;let T=e+"MainImage(color0, UV, ";(h&S.DEPTH)!=0&&f.test(l.get("fragment"))&&(T+="depth, ",y=!0),T+=`color1);
	`;const C=e+"BlendOpacity";o.set(C,g.opacity),T+="color0 = blend"+g.getBlendFunction()+"(color0, color1, "+C+`);

	`,n.set(a.FRAGMENT_MAIN_IMAGE,n.get(a.FRAGMENT_MAIN_IMAGE)+T),n.set(a.FRAGMENT_HEAD,n.get(a.FRAGMENT_HEAD)+"uniform float "+C+`;

`)}n.set(a.FRAGMENT_HEAD,n.get(a.FRAGMENT_HEAD)+l.get("fragment")+`
`),l.get("vertex")!==null&&n.set(a.VERTEX_HEAD,n.get(a.VERTEX_HEAD)+l.get("vertex")+`
`)}return{varyings:c,transformedUv:p,readDepth:y}}var nt=class extends B{constructor(e,...t){super("EffectPass");this.setFullscreenMaterial(new Ue(null,null,null,e)),this.effects=t.sort((n,i)=>i.attributes-n.attributes),this.skipRendering=!1,this.uniforms=0,this.varyings=0,this.minTime=1,this.maxTime=Number.POSITIVE_INFINITY}get encodeOutput(){return this.getFullscreenMaterial().defines.ENCODE_OUTPUT!==void 0}set encodeOutput(e){if(this.encodeOutput!==e){const t=this.getFullscreenMaterial();t.needsUpdate=!0,e?t.defines.ENCODE_OUTPUT="1":delete t.defines.ENCODE_OUTPUT}}get dithering(){return this.getFullscreenMaterial().dithering}set dithering(e){const t=this.getFullscreenMaterial();t.dithering!==e&&(t.dithering=e,t.needsUpdate=!0)}verifyResources(e){const t=e.capabilities;let n=Math.min(t.maxFragmentUniforms,t.maxVertexUniforms);this.uniforms>n&&console.warn("The current rendering context doesn't support more than "+n+" uniforms, but "+this.uniforms+" were defined"),n=t.maxVaryings,this.varyings>n&&console.warn("The current rendering context doesn't support more than "+n+" varyings, but "+this.varyings+" were defined")}updateMaterial(){const e=/\bblend\b/g,t=new Map([[a.FRAGMENT_HEAD,""],[a.FRAGMENT_MAIN_UV,""],[a.FRAGMENT_MAIN_IMAGE,""],[a.VERTEX_HEAD,""],[a.VERTEX_MAIN_SUPPORT,""]]),n=new Map,i=new Map,s=new Map,o=new Set;let h=0,v=0,E=0,g=!1,l=!1,x;for(const c of this.effects)if(c.blendMode.getBlendFunction()===u.SKIP)E|=c.getAttributes()&S.DEPTH;else if((E&S.CONVOLUTION)!=0&&(c.getAttributes()&S.CONVOLUTION)!=0)console.error("Convolution effects cannot be merged",c);else if(E|=c.getAttributes(),x=tt("e"+h++,c,t,n,i,s,E),v+=x.varyings.length,g=g||x.transformedUv,l=l||x.readDepth,c.extensions!==null)for(const r of c.extensions)o.add(r);for(const c of n.values())t.set(a.FRAGMENT_HEAD,t.get(a.FRAGMENT_HEAD)+c.getShaderCode().replace(e,"blend"+c.getBlendFunction())+`
`);(E&S.DEPTH)!=0?(l&&t.set(a.FRAGMENT_MAIN_IMAGE,`float depth = readDepth(UV);

	`+t.get(a.FRAGMENT_MAIN_IMAGE)),this.needsDepthTexture=this.getDepthTexture()===null):this.needsDepthTexture=!1,g?(t.set(a.FRAGMENT_MAIN_UV,`vec2 transformedUv = vUv;
`+t.get(a.FRAGMENT_MAIN_UV)),i.set("UV","transformedUv")):i.set("UV","vUv"),t.forEach((c,r,p)=>p.set(r,c.trim().replace(/^#/,`
#`))),this.uniforms=s.size,this.varyings=v,this.skipRendering=h===0,this.needsSwap=!this.skipRendering;const m=this.getFullscreenMaterial();if(m.setShaderParts(t),m.setDefines(i),m.setUniforms(s),m.extensions={},o.size>0)for(const c of o)m.extensions[c]=!0;this.needsUpdate=!1}recompile(e){this.updateMaterial(),e!==void 0&&this.verifyResources(e)}getDepthTexture(){return this.getFullscreenMaterial().uniforms.depthBuffer.value}setDepthTexture(e,t=ee){const n=this.getFullscreenMaterial();n.uniforms.depthBuffer.value=e,n.depthPacking=t,n.needsUpdate=!0;for(const i of this.effects)i.setDepthTexture(e,t)}render(e,t,n,i,s){const o=this.getFullscreenMaterial(),h=o.uniforms.time.value+i;this.needsUpdate&&this.recompile(e);for(const v of this.effects)v.update(e,t,i);(!this.skipRendering||this.renderToScreen)&&(o.uniforms.inputBuffer.value=t.texture,o.uniforms.time.value=h<=this.maxTime?h:this.minTime,e.setRenderTarget(this.renderToScreen?null:n),e.render(this.scene,this.camera))}setSize(e,t){this.getFullscreenMaterial().setSize(e,t);for(const n of this.effects)n.setSize(e,t)}initialize(e,t,n){for(const i of this.effects)i.initialize(e,t,n),i.addEventListener("change",s=>this.handleEvent(s));if(this.updateMaterial(),this.verifyResources(e),n!==void 0&&n!==b){const i=this.getFullscreenMaterial();i.defines.FRAMEBUFFER_PRECISION_HIGH="1"}}dispose(){super.dispose();for(const e of this.effects)e.dispose()}handleEvent(e){switch(e.type){case"change":this.needsUpdate=!0;break}}},it=class extends B{constructor({width:e=R.AUTO_SIZE,height:t=R.AUTO_SIZE,renderTarget:n,luminanceRange:i,colorOutput:s}={}){super("LuminancePass");this.setFullscreenMaterial(new Fe(s,i)),this.needsSwap=!1,this.renderTarget=n,this.renderTarget===void 0&&(this.renderTarget=new O(1,1,{minFilter:w,magFilter:w,format:s?Z:se,stencilBuffer:!1,depthBuffer:!1}),this.renderTarget.texture.name="LuminancePass.Target",this.renderTarget.texture.generateMipmaps=!1),this.resolution=new R(this,e,t)}get texture(){return this.renderTarget.texture}render(e,t,n,i,s){const o=this.getFullscreenMaterial();o.uniforms.inputBuffer.value=t.texture,e.setRenderTarget(this.renderToScreen?null:this.renderTarget),e.render(this.scene,this.camera)}setSize(e,t){const n=this.resolution;n.base.set(e,t),this.renderTarget.setSize(n.width,n.height)}initialize(e,t,n){if(n!==void 0&&n!==b){const i=this.getFullscreenMaterial();i.defines.FRAMEBUFFER_PRECISION_HIGH="1"}}},st=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D map;
#else
uniform lowp sampler2D map;
#endif
uniform float intensity;void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){outputColor=clamp(texture2D(map,uv)*intensity,0.0,1.0);}`,rt=class extends Y{constructor({blendFunction:e=u.SCREEN,luminanceThreshold:t=.9,luminanceSmoothing:n=.025,resolutionScale:i=.5,intensity:s=1,width:o=R.AUTO_SIZE,height:h=R.AUTO_SIZE,kernelSize:v=I.LARGE}={}){super("BloomEffect",st,{blendFunction:e,uniforms:new Map([["map",new d(null)],["intensity",new d(s)]])});this.renderTarget=new O(1,1,{minFilter:w,magFilter:w,stencilBuffer:!1,depthBuffer:!1}),this.renderTarget.texture.name="Bloom.Target",this.renderTarget.texture.generateMipmaps=!1,this.uniforms.get("map").value=this.renderTarget.texture,this.blurPass=new Oe({resolutionScale:i,width:o,height:h,kernelSize:v}),this.blurPass.resolution.resizable=this,this.luminancePass=new it({renderTarget:this.renderTarget,colorOutput:!0}),this.luminancePass.resolution=this.resolution,this.luminanceMaterial.threshold=t,this.luminanceMaterial.smoothing=n}get texture(){return this.renderTarget.texture}get luminanceMaterial(){return this.luminancePass.getFullscreenMaterial()}get resolution(){return this.blurPass.resolution}get width(){return this.resolution.width}set width(e){this.resolution.width=e}get height(){return this.resolution.height}set height(e){this.resolution.height=e}get dithering(){return this.blurPass.dithering}set dithering(e){this.blurPass.dithering=e}get kernelSize(){return this.blurPass.kernelSize}set kernelSize(e){this.blurPass.kernelSize=e}get distinction(){return console.warn(this.name,"The distinction field has been removed, use .threshold and .smoothing instead."),1}set distinction(e){console.warn(this.name,"The distinction field has been removed, use .threshold and .smoothing instead.")}get intensity(){return this.uniforms.get("intensity").value}set intensity(e){this.uniforms.get("intensity").value=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}update(e,t,n){const i=this.renderTarget;this.luminancePass.isEnabled()?(this.luminancePass.render(e,t,i),this.blurPass.render(e,i,i)):this.blurPass.render(e,t,i)}setSize(e,t){this.blurPass.setSize(e,t),this.renderTarget.setSize(this.resolution.width,this.resolution.height)}initialize(e,t,n){this.blurPass.initialize(e,t,n),!t&&n===b&&(this.renderTarget.texture.format=D),n!==void 0&&(this.renderTarget.texture.type=n)}};new L;new te;new V;function $(e,t){let n="texel";if(e!==null&&!(Number.parseInt(oe)>=133&&t&&e.format===Z&&e.type===b&&e.encoding===K))switch(e.encoding){case K:n="sRGBToLinear(texel)";break;case re:n="texel";break;default:throw new Error(`Unsupported encoding: ${e.encoding}`)}return n}new L;new L;var at=`#ifdef TEXTURE_PRECISION_HIGH
uniform mediump sampler2D map;
#else
uniform lowp sampler2D map;
#endif
#if defined(ASPECT_CORRECTION) || defined(UV_TRANSFORM)
varying vec2 vUv2;
#endif
void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){
#if defined(ASPECT_CORRECTION) || defined(UV_TRANSFORM)
vec4 texel=texelToLinear(texture2D(map,vUv2));
#else
vec4 texel=texelToLinear(texture2D(map,uv));
#endif
outputColor=TEXEL;}`,Q=`#ifdef ASPECT_CORRECTION
uniform float scale;
#else
uniform mat3 uvTransform;
#endif
varying vec2 vUv2;void mainSupport(const in vec2 uv){
#ifdef ASPECT_CORRECTION
vUv2=uv*vec2(aspect,1.0)*scale;
#else
vUv2=(uvTransform*vec3(uv,1.0)).xy;
#endif
}`,ot=class extends Y{constructor({blendFunction:e=u.NORMAL,texture:t=null,aspectCorrection:n=!1}={}){super("TextureEffect",at,{blendFunction:e,defines:new Map([["TEXEL","texel"]]),uniforms:new Map([["map",new d(null)],["scale",new d(1)],["uvTransform",new d(null)]])});this.texture=t,this.aspectCorrection=n,this.isWebGL2=!1}get texture(){return this.uniforms.get("map").value}set texture(e){const t=this.texture,n=this.defines;if(t!==e){this.uniforms.get("map").value=e,n.delete("TEXTURE_PRECISION_HIGH");const i=$(e,this.isWebGL2);n.set("texelToLinear(texel)",i),e!==null&&(e.type!==b&&n.set("TEXTURE_PRECISION_HIGH","1"),(t===null||t.type!==e.type||t.encoding!==e.encoding)&&this.setChanged())}}get aspectCorrection(){return this.defines.has("ASPECT_CORRECTION")}set aspectCorrection(e){this.aspectCorrection!==e&&(e?(this.uvTransform&&(this.uvTransform=!1),this.defines.set("ASPECT_CORRECTION","1"),this.setVertexShader(Q)):(this.defines.delete("ASPECT_CORRECTION"),this.setVertexShader(null)),this.setChanged())}get uvTransform(){return this.defines.has("UV_TRANSFORM")}set uvTransform(e){this.uvTransform!==e&&(e?(this.aspectCorrection&&(this.aspectCorrection=!1),this.defines.set("UV_TRANSFORM","1"),this.uniforms.get("uvTransform").value=new ne,this.setVertexShader(Q)):(this.defines.delete("UV_TRANSFORM"),this.uniforms.get("uvTransform").value=null,this.setVertexShader(null)),this.setChanged())}setTextureSwizzleRGBA(e,t=e,n=e,i=e){const s="rgba";let o="";(e!==F.RED||t!==F.GREEN||n!==F.BLUE||i!==F.ALPHA)&&(o=[".",s[e],s[t],s[n],s[i]].join("")),this.defines.set("TEXEL","texel"+o),this.setChanged()}update(e,t,n){const i=this.uniforms.get("map").value;this.uvTransform&&i.matrixAutoUpdate&&(i.updateMatrix(),this.uniforms.get("uvTransform").value.copy(i.matrix))}initialize(e,t,n){this.isWebGL2=e.capabilities.isWebGL2;const i=$(this.texture,this.isWebGL2);this.defines.set("texelToLinear(texel)",i)}};const lt=e=>(Te("data-v-798a137c"),e=e(),ye(),e),ct=lt(()=>_e("div",{id:"three-canvas",style:{width:"0.8vw",height:"0.45vw"}},null,-1)),ut=[ct];function dt(e){let t,n,i,s,o,h,v,E=[];function g(){let r=le();t=r.scene,n=r.camera,i=r.renderer,r.control.enabled=!1,n.position.z=1,n.rotation.x=1.16,n.rotation.y=-.12,n.rotation.z=.27,l(),x(),new j().load("../src/assets/image/galaxy.jpg",function(y){v=new ot({blendFunction:u.COLOR_DODGE,texture:y}),v.blendMode.opacity.value=.2,c()}),m()}function l(){let r=new ce(5592405);t.add(r);let p=new ue(16747545);p.position.set(0,0,1),t.add(p);let y=new z(13395456,50,450,1.7);y.position.set(200,300,100),t.add(y);let f=new z(14177406,50,450,1.7);f.position.set(100,300,100),t.add(f);let T=new z(3569580,50,450,1.7);T.position.set(300,300,200),t.add(T),t.fog=new de(218190,.001),i.setClearColor(t.fog.color)}const x=function(){new j().load("../src/assets/image/smoke_2.png",function(p){o=new he(500,500),h=new fe({map:p,transparent:!0,depthTest:!1});for(let y=0;y<50;y++){let f=new k(o,h);f.position.set(Math.random()*800-400,500,Math.random()*500-500),f.rotation.x=1.16,f.rotation.y=-.12,f.rotation.z=Math.random()*2*Math.PI,f.material.opacity=.55,E.push(f),t.add(f)}})},m=function(){E.forEach(r=>{r.rotation.z-=.002}),i.render(t,n),requestAnimationFrame(m)},c=function(){const r=new rt({blendFunction:u.COLOR_DODGE,kernelSize:I.SMALL,useLuminanceFilter:!0,luminanceThreshold:.3,luminanceSmoothing:.75});r.blendMode.opacity.value=1.5;let p=new nt(n,r,v);p.renderToScreen=!0,s=new ve(i),s.addPass(new ge(t,n)),s.addPass(p)};return me(()=>{g(),window.onresize=function(){location.reload()}}),(r,p)=>(Ee(),xe("body",null,ut))}const ht={name:"three_06"},ft=Object.assign(ht,{setup:dt});var Et=pe(ft,[["__scopeId","data-v-798a137c"]]);export{Et as default};
